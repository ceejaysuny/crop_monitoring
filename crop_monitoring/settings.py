"""
Django settings for crop_monitoring project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

from osgeo import gdal
from osgeo import ogr
from osgeo import osr
from osgeo import gdal_array
from osgeo import gdalconst





# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




#GDAL_LIBRARY_PATH = r'C:\Program Files\GDAL\gdal.dll'

GDAL_LIBRARY_PATH = os.getenv('GDAL_LIBRARY_PATH', r'C:\ProgramData\anaconda3\Library\bin\gdal.dll') 
#GDAL_LIBRARY_PATH = os.getenv('GDAL_LIBRARY_PATH', r'C:\Program Files\GDAL\gdal-data') 

# settings.py
AUTH_USER_MODEL = 'monitoring.CustomUser'





# Static files (CSS, JavaScript, Images)
'''
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'monitoring/static'),  # Adjust BASE_DIR as needed
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # For production

'''

# settings.py
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",
]


#import os

#if os.name == 'nt':  # For Windows systems
   # from ctypes import CDLL
    #gdal_path = os.path.join(os.environ['ProgramFiles'], 'GDAL', 'gdal.dll')
    #gdal = CDLL(gdal_path)



#if os.name == 'nt':
   # gdal_path = os.path.dirname(os.path.abspath('C:\\Program Files\\GDAL\\gdal.dll\\gdal-data'))  # Modify path if necessary
   # os.add_dll_directory(gdal_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zdsfuw6v3*5#luo+54y1xh2q7f5p9hq+05_qkaz%t%hgb+8j+r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition
'''
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'monitoring',
]
'''
# Application definition
# settings.py
INSTALLED_APPS = [
    'monitoring',  # Custom app with CustomUser model
    'captcha',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # other apps
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'crop_monitoring.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
# Optional: Customize message storage (default is 'django.contrib.messages.storage.fallback.FallbackStorage')
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

WSGI_APPLICATION = 'crop_monitoring.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#       'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}


DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': 'cropmonitor_db',
        'USER': 'postgres',
        'PASSWORD': 'Ceejay123',
        'HOST': 'localhost',
        'PORT': '5433',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

#STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# file: settings.py
from django.contrib.messages import constants as messages

MESSAGE_TAGS = {
    messages.DEBUG: 'debug',
    messages.INFO: 'info',
    messages.SUCCESS: 'success',
    messages.WARNING: 'warning',
    messages.ERROR: 'error',
}

# CAPTCHA image
CAPTCHA_FONT_SIZE = 36
CAPTCHA_LENGTH = 5
CAPTCHA_IMAGE_SIZE = (150, 50)
CAPTCHA_TIMEOUT = 5  # Expiry time in minutes


import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

BASE_DIR = Path(__file__).resolve().parent.parent

# Load the API key from the .env file
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')